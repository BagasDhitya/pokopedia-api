// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  image     String? // optional
  role      Role      @default(CUSTOMER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  cart         Cart[]
  transactions Transaction[]

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Product {
  id        Int       @id @default(autoincrement())
  name      String
  image     String?
  stock     Int
  basePrice Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  cartItems CartItem[]
}

model CartItem {
  id       Int @id @default(autoincrement())
  quantity Int @default(1)

  // snapshot data
  productId Int
  name      String
  image     String?
  basePrice Float

  cartId  Int
  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Transaction {
  id          Int      @id @default(autoincrement())
  invoice     String?  @unique @default(uuid())
  totalAmount Float    @default(0) // tambahin totalAmount biar ga error
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  carts Cart[] // 1 transaksi bisa punya banyak cart

  Message Message[]
}

model Cart {
  id           Int       @id @default(autoincrement())
  totalAmount  Float     @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  checkedOutAt DateTime? // opsional: penanda cart sudah di-checkout

  userId   Int
  user     User       @relation(fields: [userId], references: [id])
  CartItem CartItem[]

  transactionId Int?
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  senderId      Int
  receiverId    Int
  transactionId Int?

  sender      User         @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  transaction Transaction? @relation(fields: [transactionId], references: [id])
}

enum Role {
  CUSTOMER
  ADMIN
}
